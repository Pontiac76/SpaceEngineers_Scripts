//x3,1,,26[8]LargeCargo@@@@@[4]%3,1,,43[8]RefineryOres@@@@@#RefineryIngots@@@@@[4]%2,1,,26[8]@@@@3:&gt;:4000000@[4]%3,1,,16[7]2[5]%5,1,,16[7]1[5]%,,####3,1.1.1
// Above is your LOAD LINE. Copy it into Visual Script Builder to load your script.
// dco.pe/vsb

public Program()
{
  Runtime.UpdateFrequency = UpdateFrequency.Update100;
}

void Main(string argument)
{
  // block declarations
  string ERR_TXT = "";
  List<IMyTerminalBlock> v0 = new List<IMyTerminalBlock>();
  GridTerminalSystem.GetBlocksOfType<IMyCargoContainer>(v0);
  if(v0.Count == 0) {
    ERR_TXT += "no Large Cargo Container blocks found\n";
  }
  List<IMyTerminalBlock> v1 = new List<IMyTerminalBlock>();
  GridTerminalSystem.GetBlocksOfType<IMyRefinery>(v1);
  if(v1.Count == 0) {
    ERR_TXT += "no Refinery blocks found\n";
  }
  List<IMyTerminalBlock> v2 = new List<IMyTerminalBlock>();
  GridTerminalSystem.GetBlocksOfType<IMyShipDrill>(v2);
  if(v2.Count == 0) {
    ERR_TXT += "no Drill blocks found\n";
  }
  
  // display errors
  if(ERR_TXT != "") {
    Echo("Script Errors:\n"+ERR_TXT+"(make sure block ownership is set correctly)");
    return;
  }
  else {Echo("");}
  
  // logic
  for(int i = 0; i < v0.Count; i++) {
  }
  for(int i = 0; i < v1.Count; i++) {
  }
  bool result2v0 = true;
  for(int i = 0; i < v0.Count; i++) {
    if(!((float)((IMyCargoContainer)v0[i]).GetInventory(0).CurrentVolume > 4000000)) {
      result2v0 = false;
      break;
    }
  }
  if(result2v0) {
    for(int i = 0; i < v2.Count; i++) {
      v2[i].ApplyAction("OnOff_Off");
    }
  }
  else {
    for(int i = 0; i < v2.Count; i++) {
      v2[i].ApplyAction("OnOff_On");
    }
  }
}
